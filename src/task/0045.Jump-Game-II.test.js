/**
 * @param {number[]} nums
 * @return {number}
 */
var jump = function (nums) {
  const cache = new Map();
  const buffer = [[0, 0]];
  while (buffer.length) {
    const [index, count] = buffer.shift();
    const possibile = nums[index];
    if (possibile === 0) {
      cache.set(index, 0);
      continue;
    }

    for (
      let i = index + 1;
      i <= Math.min(index + possibile, nums.length - 1);
      i++
    ) {
      const prev = cache.get(i);
      if (prev === undefined || prev > count + 1) {
        if (i !== nums.length - 1) {
          buffer.push([i, count + 1]);
        }
        cache.set(i, count + 1);
      }
    }
  }
  return cache.get(nums.length - 1) || 0;
};

import { expect, test } from "vitest";

test("45. Jump Game II", () => {
  expect(jump([2, 3, 1, 1, 4])).toBe(2);
  expect(jump([1, 2])).toEqual(1);
  expect(jump([1, 2, 3])).toEqual(2);
  expect(jump([0])).toEqual(0);
  expect(
    jump([
      1, 2, 1, 1, 1, 4, 4, 1, 5, 2, 3, 4, 1, 4, 2, 5, 2, 6, 4, 4, 2, 2, 5, 6, 2,
      3, 4, 5, 4, 4, 2, 3, 1, 4, 1, 6, 2, 3, 5, 3, 6, 6, 1, 2, 5, 3, 3, 4, 6, 1,
      1, 5, 3, 3, 4, 5, 1, 4, 2, 6, 6, 4, 1, 4, 1, 2, 1, 4, 4, 2, 1, 2, 2, 5, 6,
      5, 4, 4, 3, 6, 5, 2, 5, 6, 1, 4, 3, 4, 3, 3, 1, 2, 6, 5, 3, 6, 1, 2, 6, 4,
      2, 3, 3, 4, 6, 3, 5, 3, 2, 3, 3, 1, 3, 2, 4, 1, 3, 5, 1, 1, 5, 2, 4, 2, 2,
      5, 3, 4, 2, 1, 3, 3, 1, 2, 4, 5, 4, 6, 2, 5, 6, 4, 6, 5, 2, 2, 1, 4, 6, 4,
      2, 4, 1, 6, 3, 3, 6, 1, 4, 5, 4, 5, 1, 2, 3, 6, 1, 4, 3, 2, 5, 1, 5, 2, 5,
      1, 2, 3, 3, 6, 6, 3, 5, 2, 6, 1, 6, 4, 3, 4, 1, 2, 5, 1, 5, 6, 5, 3, 1, 5,
      6, 3, 6, 3, 5, 6, 2, 2, 6, 3, 4, 1, 4, 1, 1, 3, 4, 1, 5, 6, 5, 4, 2, 5, 3,
      6, 4, 1, 2, 3, 5, 6, 5, 2, 3, 6, 1, 3, 4, 6, 3, 2, 5, 5, 1, 6, 6, 6, 2, 3,
      5, 5, 4, 5, 2, 1, 6, 6, 2, 5, 1, 3, 2, 5, 1, 2, 3, 4, 1, 1, 5, 1, 4, 1, 2,
      2, 6, 1, 4, 3, 2, 1, 6, 5, 1, 6, 2, 3, 5, 3, 6, 6, 5, 2, 1, 4, 4, 5, 3, 5,
      5, 1, 3, 2, 6, 1, 6, 6, 4, 6, 5, 3, 3, 1, 6, 2, 6, 4, 2, 4, 1, 2, 2, 2, 2,
      1, 5, 4, 3, 6, 3, 2, 5, 5, 4, 6, 4, 1, 5, 2, 4, 6, 2, 4, 5, 5, 3, 4, 6, 6,
      1, 6, 6, 5, 3, 1, 4, 6, 5, 3, 5, 3, 5, 2, 3, 4, 6, 2, 5, 6, 6, 2, 5, 6, 1,
      1, 5, 4, 5, 6, 6, 5, 5, 3, 3, 4, 4, 5, 2, 6, 5, 1, 3, 2, 3, 1, 3, 1, 2, 3,
      5, 2, 5, 3, 2, 2, 3, 4, 4, 2, 6, 5, 1, 3, 4, 6, 1, 6, 4, 4, 2, 4, 5, 2, 5,
      6, 6, 1, 3, 1, 1, 4, 6, 5, 6, 4, 1, 3, 1, 1, 6, 2, 6, 4, 5, 5, 3, 5, 3, 6,
      6, 2, 1, 3, 2, 5, 5, 3, 5, 3, 3, 5, 3, 2, 1, 2, 2, 6, 1, 6, 4, 2, 2, 2, 6,
      2, 4, 2, 5, 5, 2, 3, 1, 1, 5, 6, 6, 3, 4, 6, 2, 1, 2, 1, 4, 2, 5, 6, 5, 5,
      3, 2, 1, 5, 1, 3, 2, 2, 5, 1, 6, 1, 6, 5, 6, 2, 6, 3, 6, 5, 1, 4, 6, 3, 3,
      6, 6, 4, 1, 4, 6, 3, 4, 1, 4, 2, 5, 5, 5, 4, 2, 5, 6, 6, 3, 1, 5, 4, 2, 3,
      6, 1, 6, 4, 1, 5, 5, 6, 4, 5, 4, 4, 6, 5, 2, 5, 1, 4, 3, 2, 6, 1, 5, 2, 6,
      2, 6, 1, 2, 3, 5, 5, 4, 4, 5, 4, 2, 1, 4, 1, 4, 6, 1, 1, 2, 6, 2, 3, 6, 4,
      4, 5, 6, 6, 4, 1, 6, 3, 2, 4, 1, 4, 5, 5, 2, 6, 6, 4, 2, 5, 4, 6, 6, 5, 2,
      4, 1, 1, 4, 1, 1, 4, 6, 1, 5, 2, 4, 6, 5, 1, 6, 6, 6, 2, 1, 6, 1, 5, 5, 4,
      5, 2, 3, 2, 2, 2, 6, 4, 6, 2, 4, 6, 4, 5, 1, 3, 2, 4, 2, 6, 6, 4, 3, 3, 1,
      1, 4, 4, 5, 5, 4, 1, 6, 5, 1, 3, 3, 6, 5, 5, 3, 6, 3, 5, 2, 4, 3, 4, 6, 5,
      2, 6, 6, 1, 2, 3, 4, 6, 1, 5, 6, 4, 6, 6, 1, 1, 2, 4, 6, 4, 1, 1, 6, 6, 2,
      1, 1, 2, 3, 6, 5, 3, 1, 6, 1, 3, 6, 2, 4, 5, 3, 2, 5, 3, 5, 5, 2, 1, 3, 4,
      4, 6, 2, 4, 3, 3, 1, 5, 3, 3, 1, 2, 5, 2, 5, 2, 2, 4, 2, 2, 4, 6, 3, 1, 4,
      2, 3, 4, 2, 2, 6, 3, 2, 6, 3, 3, 5, 5, 5, 2, 3, 1, 6, 5, 4, 5, 2, 6, 5, 2,
      1, 2, 2, 2, 2, 2, 3, 2, 6, 3, 1, 5, 6, 1, 4, 6, 5, 3, 3, 5, 5, 6, 5, 1, 4,
      3, 5, 5, 3, 4, 6, 4, 6, 3, 2, 1, 1, 6, 2, 2, 5, 5, 3, 1, 3, 5, 6, 3, 6, 2,
      5, 6, 2, 1, 4, 4, 2, 2, 6, 2, 1, 5, 6, 1, 1, 3, 3, 5, 5, 3, 2, 5, 2, 1, 3,
      2, 4, 3, 5, 2, 5, 5, 4, 1, 1, 3, 4, 3, 1, 3, 5, 5, 4, 5, 5, 1, 3, 5, 4, 6,
      5, 4, 2, 1, 2, 6, 6, 4, 4, 5, 6, 6, 6, 3, 4, 3, 5, 2, 5, 6, 5, 2, 1, 4, 5,
      3, 1, 6, 4, 1, 5, 4, 5, 2, 5, 1, 4, 2, 6, 3, 3, 5, 1, 3, 4, 3, 3, 6, 6, 5,
      5, 5, 4, 5, 3, 6, 6, 6, 4, 2, 4, 4, 1, 2, 2, 2, 3, 2, 2, 5, 6, 5, 6, 3, 3,
      1, 1, 4, 1, 6, 6, 5, 3, 2, 6, 5, 2, 1, 6, 1, 4, 6, 4, 1, 2, 1, 2, 5, 1, 1,
      6, 3, 2, 5, 4, 5, 2, 6, 5, 6, 2, 2, 1, 5, 5, 1, 6, 2, 1, 3, 4, 5, 4, 3, 1,
      5, 6, 5, 4, 1, 2, 3, 4, 2, 2, 6, 2, 4, 3, 2, 5, 3, 2, 2, 5, 6, 3, 3, 2, 1,
      4, 5, 2, 3, 2, 5, 3, 1, 3, 6, 3, 6, 4, 2, 5, 3, 6, 1, 6, 5, 2, 1, 5, 2, 1,
      1, 4, 3, 3, 1, 1, 2, 2, 1, 1, 4, 1, 6, 5, 5, 6, 4, 6, 6, 2, 2, 2, 6, 1, 1,
      1, 1, 5, 2, 2, 1, 6, 5, 6, 1, 3, 1, 6, 4, 1, 2, 1, 5, 1, 1, 3, 6, 4, 5, 4,
      2, 3, 4, 1, 5, 2, 2, 1, 6, 2, 3, 2, 3, 3, 1, 1, 4, 5, 5, 3, 5, 3, 6, 4, 5,
      4, 4, 4, 2, 2, 1, 4, 6, 0, 0, 0, 0, 0,
    ])
  ).toEqual(274);
});
